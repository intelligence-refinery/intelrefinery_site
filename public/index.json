[{"categories":["Visualizations"],"contents":" \n       \n Matplotlib \u0026amp; Seaborn Create single plot  The figure object holds all subplots and other plot elements inside it  A figure can have one or more subplots inside it called axes, arranged in rows and columns. Every figure has at least one axes Not related to X- or Y-axis   ## Import libraries import matplotlib.pyplot as plt ## Set style plt.style.use(\u0026#39;seaborn-ticks\u0026#39;) ## Matplotlib version \u0026gt;= 1.4 to use this ## Set figure size plt.figure(figsize=(10,7)) ## Set as (width, height) ## Create lot plt.plot([1,2,3,4,5], [1,2,3,4,10], \u0026#39;go\u0026#39;, label=\u0026#39;GreenDots\u0026#39;) # green dots plt.plot([1,2,3,4,5], [2,3,4,5,11], \u0026#39;b*\u0026#39;, label=\u0026#39;Bluestars\u0026#39;) # blue stars ## Label plot plt.title(\u0026#39;A Simple Scatterplot\u0026#39;, fontsize=20) plt.xlabel(\u0026#39;O\u0026#39;, fontsize=18) plt.ylabel(\u0026#39;Y\u0026#39;, fontsize=18) plt.xlim([0, 6]) ## (0, 6) plt.ylim([0, 12]) ## (0, 12) plt.tick_params(axis=\u0026#39;both\u0026#39;, which=\u0026#39;major\u0026#39;, labelsize=14) ## Legend plt.legend(loc=\u0026#39;best\u0026#39;, fontsize=16) ## \u0026#39;best\u0026#39; prevents legend from overlapping with plot elements ## Show plot plt.show() Create subplots For loop ## Set up subplot grid fig, axes = plt.subplots(nrows = 9, ncols = 2, sharex = False, sharey = False, figsize=(8, 15)) fig.subplots_adjust(top=0.92, wspace=0.2, hspace=0.3) plt.tight_layout() To delete a blank subplot:\nfig.delaxes(axes[8][1])  Plotly Plotly does not need much introduction, as it is now very widely used to create interactive plots in both Python and R.\n Plotting  For a while, one major drawback of Plotly is its, in my opinion, rather inconvenient syntax, where the source data needs to be passed in as arrays even though most of us want to be able to plot data directly from dataframes. cufflinks package, which bridges pandas and Plotly, the release of Plotly Express\n Styling  Plotnine One of the strengths of the R language is its very powerful graphing package ggplot2, with its distinctive implementation of Leland Wilkinson’s Grammar of Graphics. The Plotnine package brings this (at least part of it, it seems for now) capability to Python, with very little change to the R syntax. Here is a (ever growing) collection of useful links curated by us to get your started with using Plotnine.\nThe brackets around the ggplot() function call looks strange at first, but it is needed for the signature multi-line ggplot2 grammer to work:\n## Import libraries import pandas as pd from plotnine import * from random import randint # Generate dataset random_numbers = [randint(1, 100) for p in range(0, 100)] df = pd.DataFrame({\u0026#39;number\u0026#39;: random_numbers}) # Draw plot p = ( ggplot(df, aes(x=\u0026#39;number\u0026#39;)) + geom_histogram(bins=20, na_rm=True) + ggtitle(\u0026#39;Histogram of random numbers\u0026#39;) + theme_light() ) ## Display plot p.draw(); If you want to save the plot to file:\np.save(\u0026quot;output.png\u0026quot;) And just because I can see myself wanting to use these plots in a Streamlit app, here is a working template:\nimport pandas as pd import numpy as np from plotnine import * import streamlit as st n = 10 df = pd.DataFrame({\u0026#39;x\u0026#39;: np.arange(n), \u0026#39;y\u0026#39;: np.arange(n), \u0026#39;yfit\u0026#39;: np.arange(n) + np.tile([-.2, .2], n // 2), \u0026#39;cat\u0026#39;: [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] * (n // 2)}) a = ( ggplot(df) + geom_col(aes(\u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;)) ) fig = a.draw(); ## Needed to remove the \u0026quot;ggplot\u0026lt;#\u0026gt;\u0026quot; message st.pyplot() Yellowbrick     ","permalink":"/post/graphing-in-python-a-walkthrough/","tags":[],"title":"Graphing in Python - a walkthrough"},{"categories":["Resources"],"contents":" \n       \n     ","permalink":"/post/ui-and-ux-resources/","tags":["UI","UX"],"title":"Free UI and UX resources "},{"categories":["Web development"],"contents":" \n       \n Tabs Tabs are a great way to display information that you might want to compare side-by-side. The horizontal layout also helps to save on space. I always opt for the Bootstrap tabsets, as they are very easy and consistent to implement:\n\nTab 1  Tab 2  Tab 3     Image credit: Icons 8       Image credit: Icons 8       Image credit: Icons 8       \nTo make this:\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;!-- Nav tabs --\u0026gt; \u0026lt;ul class=\u0026quot;nav nav-pills nav-justified\u0026quot; role=\u0026quot;tablist\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;nav-item active\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link active\u0026quot; data-toggle=\u0026quot;tab\u0026quot; href=\u0026quot;#tab1\u0026quot;\u0026gt;\u0026lt;font size=\u0026quot;+2\u0026quot;\u0026gt;\u0026lt;b\u0026gt;Tab 1\u0026lt;/b\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; data-toggle=\u0026quot;tab\u0026quot; href=\u0026quot;#tab2\u0026quot;\u0026gt;\u0026lt;font size=\u0026quot;+2\u0026quot;\u0026gt;\u0026lt;b\u0026gt;Tab 2\u0026lt;/b\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;nav-item\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;nav-link\u0026quot; data-toggle=\u0026quot;tab\u0026quot; href=\u0026quot;#tab3\u0026quot;\u0026gt;\u0026lt;font size=\u0026quot;+2\u0026quot;\u0026gt;\u0026lt;b\u0026gt;Tab 3\u0026lt;/b\u0026gt;\u0026lt;/font\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- Tab panes --\u0026gt; \u0026lt;div class=\u0026quot;tab-content\u0026quot;\u0026gt; \u0026lt;div id=\u0026quot;tab1\u0026quot; class=\u0026quot;container tab-pane active\u0026quot;\u0026gt; Tab 1 content \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;tab2\u0026quot; class=\u0026quot;container tab-pane fade\u0026quot;\u0026gt; Tab 2 content \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;tab3\u0026quot; class=\u0026quot;container tab-pane fade\u0026quot;\u0026gt; Tab 3 content \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \nFloating page outline When the page has a lot of content, it is very helpful to include a floating table of contents on the side of the page that shows the reader where they are. You can see an example of this on the left!\nAfter experimenting with a few options, I found that the steps outlined here by Aidan Feldman work most easily and the best for Blogdown sites:\n\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.rawgit.com/afeld/bootstrap-toc/v1.0.1/dist/bootstrap-toc.min.css\u0026quot; /\u0026gt; \u0026lt;script src=\u0026quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdn.rawgit.com/afeld/bootstrap-toc/v1.0.1/dist/bootstrap-toc.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;body data-spy=\u0026quot;scroll\u0026quot; data-target=\u0026quot;#toc\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;!-- sidebar, which will move to the top on a small screen --\u0026gt; \u0026lt;div class=\u0026quot;col-sm-2\u0026quot;\u0026gt; \u0026lt;nav id=\u0026quot;toc\u0026quot; data-toggle=\u0026quot;toc\u0026quot; class=\u0026quot;sticky-top\u0026quot; style=\u0026#39;padding-top:40px\u0026#39;\u0026gt;\u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- main content area --\u0026gt; \u0026lt;div class=\u0026quot;col-sm-10\u0026quot;\u0026gt; \u0026lt;!-- Page content --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \nIf there are headings that you do not want to be included in the outline, you can change the header HTML tag, like \u0026lt;h2\u0026gt;, to \u0026lt;h2 data-toc-skip\u0026gt;.\n\nStyle code blocks I love the ability to use both Python and R code in a single Rmarkdown post on Blogdown sites. With that, it would be nice to be able to easily visually distinguish Python and R code blocks. Here are the CSS stylings that I use in my sites:\ncode{ /* Base styling for all code blocks */ padding: 3px 5px; background: #ffffff; border: 1px solid $border-color; border-radius: 3px; color: $text-color-dark; } .python { /* This can be any other language, ex. R, HTML, CSS */ background: #ffffff; border-color: #F6B156; border-style: dotted; page-break-inside: avoid; font-family: monospace; font-size: 15px; line-height: 1.6; margin-bottom: 1.6em; max-width: 100%; overflow: auto; padding: 1em 1.5em; display: block; word-wrap: break-word; } \n    ","permalink":"/post/neat-html-snippets-to-jazz-up-your-site/","tags":["Useful"],"title":"HTML and CSS snippets to jazz up your site"},{"categories":["Careers"],"contents":"  ","permalink":"/post/resume-builder-platforms/","tags":["Job search","Resume","Useful"],"title":"Make resume writing fun again "},{"categories":["Package  roundup"],"contents":" As useful as they are, and they really are, Jupyter notebooks can feel rather stale after a few years. While they are great for quickly testing out code and exploring datasets, I can’t help but want something more fun and polished for presenting a completed project.\nFor this reason I had been working largely in R for the past while, despite my preference for the simplicity of the Python syntax, in large part due to the vibrant Shiny ecosystem that makes creating dashboards and interactive web apps easy and fun. However, I am happy to report that in really just the past year or so, the interactive app/dashboard scene in Python has really flourished, first with the appearance of the Plotly Dash platform and then most recently with Streamlit. Here is a (ever updating) round-up of my experiences so far with Python packages that allow us to bring our data science projects to life.\n\nStreamlit  Plotly Dash  Voilà   What really drew me back to Python is the appearance of Streamlit, an open-source library that really truly makes converting a data analysis workflow to an app a breeze. By adding a few magic commands, a Python script is spun to an interactive app that can be deployed on Heroku like any other web app.\n\n \nInitially, Streamlit seemed to me neither here nor there, sitting somewhere between Plotly Dash and Jupyter notebooks. While it seemed very easy to worked with, I thought that it was missing the “look” of Dash and also the versatility of cell-based operations of Jupyter. However, as soon as I gave it a try, I totally understood the allure.\nThe absolute best feature of Streamlit, in my opinion, is how easy it is to create interactive widgets like dropdown menus, radio boxes, sliders and even text/number inputs, without needing to write any callbacks. Using an example from the official documentation, this is how to create and get input from a slider:\nimport streamlit as st age = st.slider(\u0026#39;How old are you?\u0026#39;, 0, 130, 25) st.write(\u0026quot;I\u0026#39;m \u0026quot;, age, \u0026#39;years old\u0026#39;) Creating other types of interactive widgets in Streamlit is just as easy. You can find a list of functionalities currently supported here.\nIn comparison, this is how to create the same thing in Plotly Dash:\nimport dash import dash_html_components as html import dash_core_components as dcc app = dash.Dash(__name__, external_stylesheets=external_stylesheets) app.layout = html.Div([ dcc.Slider( id=\u0026#39;my-slider\u0026#39;, min=0, max=20, step=0.5, value=10, ), html.Div(id=\u0026#39;slider-output-container\u0026#39;) ]) @app.callback( dash.dependencies.Output(\u0026#39;slider-output-container\u0026#39;, \u0026#39;children\u0026#39;), [dash.dependencies.Input(\u0026#39;my-slider\u0026#39;, \u0026#39;value\u0026#39;)]) def update_output(value): return \u0026#39;You have selected \u0026quot;{}\u0026quot;\u0026#39;.format(value) if __name__ == \u0026#39;__main__\u0026#39;: app.run_server(debug=True)  Of course, Plotly Dash provides many other functionalities that Streamlit is not capable of, at least for now. However, the simplicity of working with Streamlit makes it so satistfying to quickly whip up an interactive app to showcase your work.\nFor example, I have made two Streamlit apps to host my microlearning series on survival analysis and building a random forest classifier to predict customer churn. I made them both multipage apps that allow progressive reveal of the content at the learner’s pace, in order to take advantage of the easy interactive widgets to the fullest extent. Granted that I had the workflow written out before hand, but making either one of these apps took only 2-3 days. Check them out!\n\nSurvival analysis  Random forest       If you are interested in trying Streamlit out, there are several demo apps listed in the documentation linked above. In addition, many enthusiastic adopters of Streamlit have tweeted about their own creations.\n   Plotly Dash has been around for quite a while now, so I will not go as much in depth here, trusting that everyone is already pretty familiar with it. Unlike the other two packages introduced here, Dash has the benefit of the very large and active Plotly community to serve as a solid knowledge base to support users of all levels.\nAs of now, Plotly Dash just cannot be beat in terms of how polished its end products look. It is my package of choice if I need to create a dashboard/app that will be used by non-technical end users, such as business professionals, with clear interactive features and sophisticated crosstalk between elements (i.e. data tables, plots, maps, etc.). For example, here is a sales dashboard that I had made while learning the Dash platform.\nHowever, as mentioned in comparison with Streamlit, the Dash code base can get quite large and complex very quickly, particularly when used with the built-in or Bootstrap grid system for layout. Consequently, it has a fairly steep learning curve, with very rewarding results. On a related note, I cannot recommend enough the Dash Bootstrap Components package, which greatly simplifies the implementations of a lot of layout and interactive features with the added benefit of the clean Bootstrap look.\nWant to get started on your own? For an step-by-step guide to building a professional dashboard, take a look at the video below made by a Plotly developer:\n \n Finally, just because we want to upgrade from Jupyter notebooks does not mean we are going to do away with it completely, as it is still a fantastic platform for exploring data and prototyping analysis workflows. In addition, the ability to use Python and R together in the same notebook makes it indispensible for data scientists who want the best of both worlds: ease of data wrangling in Python but mature analysis packages in R. Since so many of us begin a project in Jupyter notebooks, it would be a dream come true to be able to make dashboards/interactive apps from the analysis results right there. The recently released package Voilà grants that wish, somewhat.\nHere is an introduction to the package at SciPy 2019:\n\n \nWhile interactive widgets like dropdown menus and sliders can be added to the dashboard, as you can do in Streamlit and Plotly Dash, using the ipywidgets library, I have personally found the syntax much less clear and not as many tutorials/help pages available to get a newcomer started. In addition, as Voilà is still in very early stages of development, the resulting dashboard/app looks rather barebones as compared to Dash. Here is an “learning dashboard” that I had made using Voilà to introduce various model-agnostic approaches to calculate feature importance, for comparison with the sales dashboard made with Dash.\nNevertheless, as mentioned above, one strength of Jupyter notebooks is the ability to use other language kernels. Any language that is supported by a Jupyter kernel can be used to create a Voilà app, so for projects where that is needed, this would be the package for you.\n   \n \nTaken together, it is really an exciting time for finally being able to communicate/present your Python data science projects in style. This post will be updated as new features and packages become available, so please check back once in a while! :)\n","permalink":"/post/making-python-apps/","tags":["Dash","Jupyter","Streamlit","Voila","Python"],"title":"Going beyond Jupyter notebooks"},{"categories":null,"contents":"Welcome to Intelligence Refinery!\nWe are Nancy and Mihai Chelaru-Centea, two neuroscience majors who not so long ago ditched the lab notebooks for Jupyter notebooks. With the explosion of the data science field, there is a bewildering number of articles, tutorials, Stackoverflow answers, courses and packages on the internet for anyone who cares to look. Like many other newcomers, we are navigating this ever rising sea of information, and often misinformation, with varying degrees of success each day.\nAfter having worked for some time as data scientist/developers and meeting others on the same path, we realized the importance of creating a dedicated repository in which we can continuously refine and grow our professional knowledge, so as to be able to keep pace with this fast moving field. So, we rolled up our sleeves and built this site, where we try to distill everything we are learning about data science, software development, and anything else of interest into helpful nuggets for ourselves and whoever else that may stumble onto this site.\nWe hope that you enjoy your time here, and would love to hear any comments or questions that you have!\n","permalink":"/about/about/","tags":null,"title":"About Us"}]